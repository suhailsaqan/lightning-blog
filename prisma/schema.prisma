generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String      @id @default(cuid())
  createdAt      DateTime    @default(now()) @map(name: "created_at")
  updatedAt      DateTime    @default(now()) @updatedAt @map(name: "updated_at")
  name           String?     @unique
  pubkey         String?     @unique
  trust          Float       @default(0)
  lastSeenAt     DateTime?
  sessions       Session[]
  sites          Site[]
  accounts       Account[]

  @@index([createdAt])
  @@map(name: "users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  refresh_token_expires_in Int?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Post {
  uid             String      @id 
  slug            String      @unique @default(cuid())
  title           String?
  date            DateTime @default(now())
  author          String?
  description     String?
  text            String?
  published       Boolean?     @default(false)
  price           Int?
  site            Site? @relation(fields: [siteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  siteId          String?
  @@unique([uid, siteId], name: "post_site_constraint")
}

model Site {
  id            String  @id @default(cuid())
  name          String?
  description   String? @db.Text
  logo          String?
  image         String? @db.Text
  imageBlurhash String? @db.Text
  subdomain     String? @unique
  customDomain  String? @unique
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User? @relation(fields: [userId], references: [id])
  userId        String?
  posts         Post[]
}

model Payment {
  uid           String      @id 
  slug          String      
  invoice_hash  String?     @unique
  invoice       String?     @unique
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LnAuth {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")
  k1        String   @unique
  pubkey    String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}